plot.title = element_text(hjust = .5, size = 18))
#| label: Point data prep
## Data cleaning/wrangling -----------------------------------------------------
### Domicilio - cleaning
Abitare$dom <- as.character(Abitare$dom)
Abitare$dom <- ifelse(Abitare$dom == 'Stesso della residenza', Abitare$res, Abitare$dom)
## Index recode
abRecode <- function(x) {case_match(paste(x),
'Per nulla' ~ 1,
'Poco' ~ 2,
'Abbastanza' ~ 3,
'Molto' ~ 4
)}
Abitare <- Abitare |>
mutate(across(c(abQual, abCost, abPriv, abVic, abColl),
abRecode
)
)
rm(abRecode)
### Additive index def
Abitare <- Abitare |>
mutate(abInd = rowSums(across(c(abQual, abCost, abPriv, abVic, abColl)))) |>
mutate(abInd = (abInd-5)/15 * 100) |>
mutate(abInd = round(abInd, 2)) |>
relocate(abInd, .after = abColl)
#| label: Living satisfaction index
#| fig-height: 3
#| fig-width: 6
# Dataviz ----------------------------------------------------------------------
## Index by urban zone
abPlotZon <- Abitare |>
filter(prov_dom == 'Terni' | prov_dom == 'Perugia') |>
group_by(zon) |>
summarise(meanzon = mean(abInd)) |>
mutate(zon = case_match(zon,
'Periferia' ~ 'Suburbs',
'Centro Cittadino' ~ 'City centre',
'Area Rurale' ~ 'Rural area')) |>
mutate(ovmean = mean(meanzon),
flag = ifelse(meanzon > ovmean, T, F),
zon = factor(zon,
levels = zon[order(meanzon)]))
ggPlotZon <- abPlotZon |>
ggplot(aes(x = zon, y = meanzon, colour = flag, data_id = zon, tooltip = round(meanzon, 2))) +
geom_point_interactive(size = 6) +
geom_segment_interactive(aes(y = ovmean, yend = meanzon, x = zon, xend = zon)) +
geom_point(size = 4, colour = 'white') +
scale_y_continuous(n.breaks = 4) +
geom_hline(yintercept = abPlotZon$ovmean[1], colour = 'gray70', size = 0.3) +
scale_color_met_d('Degas') +
coord_flip() +
labs(title = 'Living condition satisfaction index',
subtitle = 'Decomposition by area') +
theme_minimal() +
theme(axis.title = element_blank(),
legend.position = 'none',
plot.title = element_text(hjust = .5, size = 20),
plot.subtitle = element_text(hjust = .5, size = 15),
axis.text.y = element_text(size = 11))
### Interactive graph
girafe(ggobj = ggPlotZon,
width_svg = 8,
options = list(
opts_hover(css = ''), ## CSS code of line we're hovering over
opts_hover_inv(css = "opacity:0.3;"), ## CSS code of all other lines
opts_tooltip(css = "background-color:white;
color:black;
font-family:Helvetica;
font-style:empty;
padding:8px;
border-radius:10px;",
use_cursor_pos = T),
opts_toolbar(position = 'bottomright')))
#| label: Relationship to Umbria
#| fig-width: 5
#| fig-height: 8
## Rapporto con la regione -----------------------------------------------------
Restare |>
group_by(rapp, occ) |>
count() |>
mutate(occ = case_match(occ,
'Disoccupat*' ~ 'Unemployed',
'Studente' ~ 'Student',
'Lavorator*' ~ 'Worker',
'Dottorand*' ~ 'PhD candidate'),
rapp = case_match(rapp,
'Vorrei restare nel posto in cui vivo' ~
'I\'d like to stay where I am',
'Sarei contento di vivere e lavorare altrove' ~
'I\'d like to live and work somewhere else',
'Vorrei restare ma non posso' ~
'I\'d like to stay, but I can\'t',
'Vorrei partire ma non posso' ~
'I\'d like to leave, but I can\'t'),
rapp = factor(rapp, levels = c(
'I\'d like to stay where I am',
'I\'d like to stay, but I can\'t',
'I\'d like to leave, but I can\'t',
'I\'d like to live and work somewhere else'
))) |>
ggplot(aes(values = n, label = rapp, colour = rapp)) +
geom_pictogram(make_proportional = T, flip = T, size = 5) +
scale_label_pictogram(
values = c("circle")
) +
scale_color_manual(values = met.brewer('Tiepolo', 4)) +
facet_wrap(~occ) +
labs(title = 'Attitude towards staying') +
theme_void() +
guides(label=guide_legend(nrow=2, byrow=TRUE)) +
theme(legend.title = element_blank(),
legend.position = 'bottom',
strip.text = element_text(size = 12),
plot.title = element_text(size = 20, hjust = .5))
#| label: Setup
#| echo: false
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load('tidyverse', 'ggiraph', 'ggplot2', 'readxl', 'gt', 'MetBrewer', 'waffle', 'extrafont', 'sf')
# Data management --------------------------------------------------------------
## Import data
Abitare <- read_excel("QUEST_DEF.xlsx",
sheet = "Abitare", skip = 1) |>
filter(eta <= 35)
Restare <- read_excel("QUEST_DEF.xlsx",
sheet = "Restare", skip = 1) |>
filter(eta <= 35)
Lavorare <- read_excel("QUEST_DEF.xlsx",
sheet = "Lavorare", skip = 1) |>
filter(eta <= 35)
geoCod <- read_excel("Codici-statistici-e-denominazioni-al-30_06_2024.xlsx")
sf <- read_sf('geoData/ISTAT - confini amministrativi/Com01012024_g/Com01012024_g_WGS84.shp')
umbriasf <- read_sf('geoData/ISTAT - confini amministrativi/ProvCM01012024_g/ProvCM01012024_g_WGS84.shp') |>
filter(DEN_UTS == 'Terni' | DEN_UTS == 'Perugia')
## Font import
font_import (path ="~/Documents/Progetti/RxR/Osservatorio/Data Analysis/QUEST_23", pattern = 'fa-', prompt =  FALSE)
#| label: Map data prep
#| echo: false
## Domicilio - cleaning
Abitare$dom <- as.character(Abitare$dom)
Abitare$dom <- ifelse(Abitare$dom == 'Stesso della residenza', Abitare$res, Abitare$dom)
## Province
prov <- geoCod |>
select(`Denominazione (Italiana e straniera)`, `Unità territoriale sovracomunale`) |>
rename(denom = `Denominazione (Italiana e straniera)`,
prov = `Unità territoriale sovracomunale`)
Abitare <- left_join(Abitare, prov, by = join_by(dom == denom))
Abitare <- Abitare |>
relocate(prov, .after = dom) |>
rename(prov_dom = prov)
## Select and merge quest data
df <- left_join(Lavorare |>
select(id, occ, gen),
Abitare |>
select(id, dom, eta))
### factor età
df$eta <- as.numeric(df$eta)
df <- df |>
mutate(class_eta = case_match(eta,
c(15:19) ~ '15-20',
c(20:24) ~ '20-25',
c(25:29) ~ '25-30',
c(30:34) ~ '30-35',
c(35:39) ~ '35-40',
c(40:45) ~ '40-45'
))
### occ cleaning
df <- df |>
mutate(occ = gsub((' (inclusi contratti a nero, precari,  di ricerca, stage, servizio civile)'), '', occ, fixed = T),
occ = gsub((' (inclusi contratti a nero, precari, di ricerca, stage, servizio civile)'), '', occ, fixed = T))
## dom frequency table
domdf <- df |>
group_by(dom) |>
count()
### geospatial data merge
domdf <- left_join(domdf,
sf |>
select(COMUNE, geometry),
by = join_by(dom == COMUNE))
#| label: Coverage map
# Dataviz ----------------------------------------------------------------------
## Mappa copertura geo
ggdom <- domdf |>
ggplot() +
geom_sf(data = umbriasf, aes(geometry = geometry), colour = 'black', fill = 'gray98') +
geom_sf_interactive(aes(geometry = geometry, fill = n, data_id = dom, tooltip = n)) +
geom_sf_text(data = ~. |> filter(dom != 'Perugia'),
aes(geometry = geometry, label = dom), colour = 'black', size = 3) +
geom_sf_text(data = ~. |> filter(dom == 'Perugia'),
aes(geometry = geometry, label = dom), colour = 'white', size = 3) +
scale_fill_viridis_c(option = 'inferno', direction = -1) +
labs(title = 'Questionnaire\'s geographic coverage') +
theme_void() +
theme(legend.position = 'none',
plot.title = element_text(family = 'Helvetica', hjust = .5, size = 20))
ggsave('img/mapCop.png', plot = ggdom, width = 8, height = 9)
### Interactive
girafe(ggobj = ggdom,
width_svg = 8,
height_svg = 9,
options = list(
opts_hover(css = ''),
opts_hover_inv(css = 'opacity:0.3;'),
opts_tooltip(css = "background-color:white;
color:black;
font-family:Helvetica;
font-style:empty;
padding:8px;
border-radius:10px;",
use_cursor_pos = T),
opts_toolbar(position = 'bottomright')))
#| label: Coverage descriptive
### Genere/età/occ
df |>
mutate(gen = case_match(gen,
'Donna' ~ 'Female',
'Uomo' ~ 'Male',
'Non Binario' ~ 'Non-binary'
)) |>
ggplot(aes(x = class_eta, fill = occ)) +
geom_bar() +
scale_fill_met_d('Degas', direction = -1) +
facet_wrap(vars(gen)) +
theme_minimal() +
theme(legend.title = element_blank(),
legend.position = 'bottom',
axis.title = element_blank(),
strip.text = element_text(size = 15),
plot.title = element_text(hjust = .5, size = 18))
#| label: Point data prep
## Data cleaning/wrangling -----------------------------------------------------
### Domicilio - cleaning
Abitare$dom <- as.character(Abitare$dom)
Abitare$dom <- ifelse(Abitare$dom == 'Stesso della residenza', Abitare$res, Abitare$dom)
## Index recode
abRecode <- function(x) {case_match(paste(x),
'Per nulla' ~ 1,
'Poco' ~ 2,
'Abbastanza' ~ 3,
'Molto' ~ 4
)}
Abitare <- Abitare |>
mutate(across(c(abQual, abCost, abPriv, abVic, abColl),
abRecode
)
)
rm(abRecode)
### Additive index def
Abitare <- Abitare |>
mutate(abInd = rowSums(across(c(abQual, abCost, abPriv, abVic, abColl)))) |>
mutate(abInd = (abInd-5)/15 * 100) |>
mutate(abInd = round(abInd, 2)) |>
relocate(abInd, .after = abColl)
#| label: Living satisfaction index
#| fig-height: 3
#| fig-width: 6
# Dataviz ----------------------------------------------------------------------
## Index by urban zone
abPlotZon <- Abitare |>
filter(prov_dom == 'Terni' | prov_dom == 'Perugia') |>
group_by(zon) |>
summarise(meanzon = mean(abInd)) |>
mutate(zon = case_match(zon,
'Periferia' ~ 'Suburbs',
'Centro Cittadino' ~ 'City centre',
'Area Rurale' ~ 'Rural area')) |>
mutate(ovmean = mean(meanzon),
flag = ifelse(meanzon > ovmean, T, F),
zon = factor(zon,
levels = zon[order(meanzon)]))
ggPlotZon <- abPlotZon |>
ggplot(aes(x = zon, y = meanzon, colour = flag, data_id = zon, tooltip = round(meanzon, 2))) +
geom_point_interactive(size = 6) +
geom_segment_interactive(aes(y = ovmean, yend = meanzon, x = zon, xend = zon)) +
geom_point(size = 4, colour = 'white') +
scale_y_continuous(n.breaks = 4) +
geom_hline(yintercept = abPlotZon$ovmean[1], colour = 'gray70', size = 0.3) +
scale_color_met_d('Degas') +
coord_flip() +
labs(title = 'Living condition satisfaction index',
subtitle = 'Decomposition by area') +
theme_minimal() +
theme(axis.title = element_blank(),
legend.position = 'none',
plot.title = element_text(hjust = .5, size = 20),
plot.subtitle = element_text(hjust = .5, size = 15),
axis.text.y = element_text(size = 11))
### Interactive graph
girafe(ggobj = ggPlotZon,
width_svg = 8,
options = list(
opts_hover(css = ''), ## CSS code of line we're hovering over
opts_hover_inv(css = "opacity:0.3;"), ## CSS code of all other lines
opts_tooltip(css = "background-color:white;
color:black;
font-family:Helvetica;
font-style:empty;
padding:8px;
border-radius:10px;",
use_cursor_pos = T),
opts_toolbar(position = 'bottomright')))
#| label: Restare data prep
#| echo: false
## Index recode - abitare
abRecode <- function(x) {case_match(paste(x),
'Per nulla' ~ 1,
'Poco' ~ 2,
'Abbastanza' ~ 3,
'Molto' ~ 4
)}
Abitare <- Abitare |>
mutate(across(c(abQual, abCost, abPriv, abVic, abColl),
abRecode
)
)
rm(abRecode)
### Additive index def
Abitare <- Abitare |>
mutate(abInd = rowSums(across(c(abQual, abCost, abPriv, abVic, abColl)))) |>
mutate(abInd = (abInd-5)/15 * 100) |>
mutate(abInd = round(abInd, 2)) |>
relocate(abInd, .after = abColl)
### rest factor
restRecode <- function(x) {factor(paste(x), levels = c(
'Per nulla',
'Poco',
'Abbastanza',
'Molto')
)}
Restare <- Restare |>
mutate(across(names(Restare[startsWith(names(Restare),"rest")]),
restRecode))
Restare <- Restare |>
mutate(across(names(Restare[startsWith(names(Restare),"lasc")]),
restRecode))
Restare <- Restare |>
mutate(across(names(Restare[startsWith(names(Restare),"lim")]),
restRecode))
### Rapporto con il luogo di residenza, recode + factor
Restare <- Restare |>
mutate(rapp = case_match(rapp,
c('Anche se non vorrei penso che partirò dall\'Umbria; preferirei di no ma non penso riuscirei a vivere come vorrei',
'Anche se non vorrei penso che partirò dal posto in cui vivo; preferirei di no ma non penso riuscirei a vivere come vorrei') ~ 'Vorrei restare ma non posso',
c('Anche se non vorrei penso che resterò, preferirei partire ma non penso riuscirò a farlo',
'Anche se non vorrei penso che resterò dove sono, preferirei partire ma non penso riuscirò a farlo') ~ 'Vorrei partire ma non posso',
c('Vorrei restare nel posto in cui vivo',
'Vorrei restare nel posto in cui vivo, progettando qui la mia vita',
'Vorrei restare in Umbria, progettando qui la mia vita') ~ 'Vorrei restare nel posto in cui vivo',
'Vorrei vivere e lavorare altrove, sono convinto di voler partire' ~ 'Sarei contento di vivere e lavorare altrove',
.default = rapp),
rapp = factor(rapp, levels = c(
'Vorrei restare nel posto in cui vivo',
'Vorrei restare ma non posso',
'Vorrei partire ma non posso',
'Sarei contento di vivere e lavorare altrove'
)
))
### occ merge + cleaning
Restare <- full_join(Restare,
Lavorare |> select(id, occ))
Restare <- Restare |>
mutate(occ = gsub((' (inclusi contratti a nero, precari,  di ricerca, stage, servizio civile)'), '', occ, fixed = T),
occ = gsub((' (inclusi contratti a nero, precari, di ricerca, stage, servizio civile)'), '', occ, fixed = T))
rm(Lavorare)
#| label: Relationship to Umbria
#| fig-width: 5
#| fig-height: 8
## Rapporto con la regione -----------------------------------------------------
Restare |>
group_by(rapp, occ) |>
count() |>
mutate(occ = case_match(occ,
'Disoccupat*' ~ 'Unemployed',
'Studente' ~ 'Student',
'Lavorator*' ~ 'Worker',
'Dottorand*' ~ 'PhD candidate'),
rapp = case_match(rapp,
'Vorrei restare nel posto in cui vivo' ~
'I\'d like to stay where I am',
'Sarei contento di vivere e lavorare altrove' ~
'I\'d like to live and work somewhere else',
'Vorrei restare ma non posso' ~
'I\'d like to stay, but I can\'t',
'Vorrei partire ma non posso' ~
'I\'d like to leave, but I can\'t'),
rapp = factor(rapp, levels = c(
'I\'d like to stay where I am',
'I\'d like to stay, but I can\'t',
'I\'d like to leave, but I can\'t',
'I\'d like to live and work somewhere else'
))) |>
ggplot(aes(values = n, label = rapp, colour = rapp)) +
geom_pictogram(make_proportional = T, flip = T, size = 5) +
scale_label_pictogram(
values = c("circle")
) +
scale_color_manual(values = met.brewer('Tiepolo', 4)) +
facet_wrap(~occ) +
labs(title = 'Attitude towards staying') +
theme_void() +
guides(label=guide_legend(nrow=2, byrow=TRUE)) +
theme(legend.title = element_blank(),
legend.position = 'bottom',
strip.text = element_text(size = 12),
plot.title = element_text(size = 20, hjust = .5))
#| label: Dataviz why staying vs why going
#| layout-nrow: 1
## Motivi per restare ----------------------------------------------------------
### graphics df
#### counting each column
rest <- tibble(.rows = 4, choice = c('Per nulla',
'Poco',
'Abbastanza',
'Molto'))
for (i in 1:10) {
vec <- Restare[startsWith(names(Restare),"rest")] |>
group_by(Restare[startsWith(names(Restare),"rest")][i]) |>
drop_na() |>
count(name = paste(names(Restare[startsWith(names(Restare),"rest")][i]), '_n')) |>
rename('choice' = names(Restare[startsWith(names(Restare),"rest")][i]))
rest <- full_join(rest, vec |> mutate(choice = choice))
}
rm(i)
#### data wrangling
rest2 <- data.frame(t(rest[-1])) # swapping columns-rows
colnames(rest2) <- rest$choice
rest <- rownames_to_column(rest2) |>
mutate(rowname = gsub('_n', '', rowname)) |> # column
rename(choice = rowname)
rm(rest2)
rest <- rest |>
mutate(index = round(((Abbastanza + Molto)/89)*100, 2)) # % di abbastanza + molto importante
### graphics
labels<-data.frame(
y = c(25,50,75,100),
x = rep(0.25,4)
)
rest |>
filter(choice != 'restFort ') |>
mutate(choice = case_match(choice,
'restLeg '	~ 'Legame/impegno per la comunità',
'restSoc '	~ 'Contatti sociali e umani più gratificanti',
'restNat '	~ 'Contatto con la natura',
'restQual '	~ 'Qualità e stile di vita',
'restOpp '	~ 'Opportunità anche nel restare',
'restImp '	~ 'Idea imprenditoriale',
'restFam '	~ 'Esigenze personali/familiari',
'restCost '	~ 'Costo della vita più basso',
'restAmb '	~ 'Scarsa importanza alla carriera'
)) |>
ggplot(aes(x = choice, y = index, fill = choice)) +
geom_col() +
coord_polar() +
scale_y_continuous(limits = c(0, 85)) +
labs(title = 'Motivi per restare') +
scale_fill_manual(values = met.brewer('Tiepolo', 9)) +
theme_void() +
theme(axis.title = element_blank(),
legend.position = 'right',
legend.title = element_blank(),
plot.title = element_text(size = 20, hjust = .5))
ggsave('img/motRest.png', width = 7, height = 5)
## Motivi per lasciare ---------------------------------------------------------
### graphics df
#### counting each column
lasc <- tibble(.rows = 4, choice = c('Abbastanza', 'Molto', 'Per nulla', 'Poco'))
for (i in 1:10) {
vec <- Restare[startsWith(names(Restare),"lasc")] |>
group_by(Restare[startsWith(names(Restare),"lasc")][i]) |>
drop_na() |>
count(name = paste(names(Restare[startsWith(names(Restare),"lasc")][i]), '_n')) |>
rename('choice' = names(Restare[startsWith(names(Restare),"lasc")][i]))
lasc <- full_join(lasc, vec)
}
rm(i)
#### data wrangling
lasc2 <- data.frame(t(lasc[-1])) # swapping columns-rows
colnames(lasc2) <-  lasc$choice
lasc <- rownames_to_column(lasc2) |>
mutate(rowname = gsub('_n', '', rowname)) |> # column
rename(choice = rowname)
rm(lasc2)
lasc <- lasc |>
mutate(index = round(((Abbastanza + Molto)/166)*100, 2)) # % di abbastanza + molto importante
### graphics
labels<-data.frame(
y = c(25,50,75,100),
x = rep(0.25,4)
)
lasc |>
mutate(choice = case_match(choice,
'lascEsp '	~ 'Ampliare i propri orizzonti',
'lascOpp '	~ 'Formazione/offerte di lavoro',
'lascImp '	~ 'Idea imprenditoriale',
'lascEst '	~ 'Bellezza estetica delle città',
'lascSoc '	~ 'Relazioni sociali',
'lascFam '	~ 'Realizzazione familiare',
'lascServ '	~ 'Offerta di servizi',
'lascRit '	~ 'Realizzarsi per poi tornare',
'lascTent '	~ 'Tentare a realizzarsi',
'lascCult '	~ 'Vita culturale più intensa'
)) |>
ggplot(aes(x = choice, y = index, fill = choice)) +
geom_col() +
coord_polar() +
scale_y_continuous(limits = c(0, 95)) +
labs(title = 'Motivi per andare') +
scale_fill_manual(values = met.brewer('Tiepolo', 10)) +
theme_void() +
theme(axis.title = element_blank(),
legend.position = 'right',
legend.title = element_blank(),
plot.title = element_text(size = 20, hjust = .5))
